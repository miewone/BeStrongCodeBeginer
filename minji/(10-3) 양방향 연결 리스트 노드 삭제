'''
(10-3) 양방향 연결 리스트 노드 삭제

제 10 강에서 소개된 추상적 자료구조 DoublyLinkedList 에 대하여 node 의 삭제 연산에 관련한 아래와 같은 메서드들을 구현하세요.
popAfter()
popBefore()
popAt()

popAfter(prev) 는 인자 prev 에 의하여 주어진 node 의 다음에 있던 node 를 삭제하고, 
popBefore(next) 는 인자 next 에 의하여 주어진 node 의 이전에 있던 node 를 삭제합니다. 그리고 삭제되는 node 에 담겨 있던 data item 을 리턴합니다.
popAt(pos) 는 인자 pos 에 의하여 지정되는 node 를 삭제하고 그 node 에 담겨 있던 data item 을 리턴하는데, 
위 popAfter() 또는 popBefore() 를 호출하여 이용하는 방식으로 구현하세요. 
또한, 만약 인자 pos 가 올바른 범위 내에 있지 않은 경우에는 raise IndexError 를 이용하여 IndexError exception 을 일으키도록 구현하세요.
테스트 케이스 1-3 은 각각 (1) popAfter(), (2) popBefore(), (3) popAt() 메서드의 올바른 동작을 검증하는 케이스입니다.
'''

class Node:
    
    def __init__(self, item):
        self.data = item
        self.prev = None
        self.next = None


class DoublyLinkedList:

    def __init__(self):
        self.nodeCount = 0
        self.head = Node(None)
        self.tail = Node(None)
        self.head.prev = None
        self.head.next = self.tail
        self.tail.prev = self.head
        self.tail.next = None


    def traverse(self):
        result = []
        curr = self.head
        while curr.next.next:
            curr = curr.next
            result.append(curr.data)
        return result


    def getAt(self, pos):
        if pos < 0 or pos > self.nodeCount:
            return None

        if pos > self.nodeCount // 2:
            i = 0
            curr = self.tail
            while i < self.nodeCount - pos + 1:
                curr = curr.prev
                i += 1
        else:
            i = 0
            curr = self.head
            while i < pos:
                curr = curr.next
                i += 1

        return curr


    def insertAfter(self, prev, newNode):
        next = prev.next
        newNode.prev = prev
        newNode.next = next
        prev.next = newNode
        next.prev = newNode
        self.nodeCount += 1
        return True


    def insertAt(self, pos, newNode):
        if pos < 1 or pos > self.nodeCount + 1:
            return False

        prev = self.getAt(pos - 1)
        return self.insertAfter(prev, newNode)
'''
    def popAfter(self, prev):
        curr = prev.next
        if curr == self.tail:
            return None
        elif curr.next == self.tail:
            prev.next = self.tail
            self.tail.prev = prev
        else:
            prev.next = curr.next
            curr.next.prev = curr.prev
        self.nodeCount -= 1
        return curr.data 
'''
    def popAfter(self,prev):
        pop_node = prev.next
        new_next = pop_node.next
        prev.next = new_next 
        new_next.prev =prev 
        self.nodeCount -= 1
        return pop_node.data
 '''       
    def popBefore(self, next):
        curr = next.prev
        if curr == self.head:
            return None
        elif curr.prev == self.head:
            self.head.next = curr.next
            curr.prev = self.head
        else:
            curr.prev.next = next
            next.prev = curr.prev
        self.nodeCount -= 1
        return curr.data
'''

    def popBefore(self,next):
        pop_node = next.prev
        new_prev = pop_node.prev
        next.prev = new_prev
        new_prev.next = next
        self.nodeCount -= 1
        return pop_node.data
 '''       
    def popAt(self, pos):
        if pos < 0 or pos > self.nodeCount:
            raise IndexError
        else:
            if pos == self.nodeCount:
                return None
            elif pos == self.nodeCount:
                prev = self.getAt(pos-1)
                prev.next = self.tail 
                self.tail.prev = prev
            else:
                prev = self.getAt(pos-1)
            self.nodeCount -= 1
            return self.popAfter(self,prev)
'''
    def popAt(self,pos):
        if pos < 1 or pos > self.nodeCount:
            raise IndexError
        prev = self.getAt(pos-1)
        return self.popAfter(prev)


def solution(x):
    return 0
